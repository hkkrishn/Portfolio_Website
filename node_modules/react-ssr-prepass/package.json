{
  "_args": [
    [
      {
        "raw": "react-ssr-prepass@1.0.2",
        "scope": null,
        "escapedName": "react-ssr-prepass",
        "name": "react-ssr-prepass",
        "rawSpec": "1.0.2",
        "spec": "1.0.2",
        "type": "version"
      },
      "/Users/hari/Desktop/portfolio-hari/node_modules/next-server"
    ]
  ],
  "_from": "react-ssr-prepass@1.0.2",
  "_hasShrinkwrap": false,
  "_id": "react-ssr-prepass@1.0.2",
  "_location": "/react-ssr-prepass",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-ssr-prepass_1.0.2_1552921266976_0.5728658549859347"
  },
  "_npmUser": {
    "name": "philpl",
    "email": "phil@kitten.sh"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-ssr-prepass@1.0.2",
    "scope": null,
    "escapedName": "react-ssr-prepass",
    "name": "react-ssr-prepass",
    "rawSpec": "1.0.2",
    "spec": "1.0.2",
    "type": "version"
  },
  "_requiredBy": [
    "/next-server"
  ],
  "_resolved": "https://registry.npmjs.org/react-ssr-prepass/-/react-ssr-prepass-1.0.2.tgz",
  "_shasum": "f411414cbc043a90254cddcef0793b2aaf14b086",
  "_shrinkwrap": null,
  "_spec": "react-ssr-prepass@1.0.2",
  "_where": "/Users/hari/Desktop/portfolio-hari/node_modules/next-server",
  "author": {
    "name": "Phil Plückthun",
    "email": "phil@kitten.sh"
  },
  "babel": {
    "presets": [
      "@babel/preset-env",
      "@babel/preset-flow",
      "@babel/preset-react"
    ]
  },
  "bugs": {
    "url": "https://github.com/kitten/react-ssr-prepass/issues"
  },
  "dependencies": {
    "object-is": "^1.0.1"
  },
  "description": "A custom partial React SSR renderer for prefetching and suspense",
  "devDependencies": {
    "@babel/core": "^7.3.4",
    "@babel/preset-env": "^7.3.4",
    "@babel/preset-flow": "^7.0.0",
    "@babel/preset-react": "^7.0.0",
    "coveralls": "^3.0.3",
    "flow-bin": "^0.94.0",
    "husky": "^1.3.1",
    "jest": "^24.5.0",
    "lint-staged": "^8.1.5",
    "microbundle": "^0.11.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^1.16.4",
    "react": "^16.8.4",
    "react-dom": "^16.8.4",
    "react-is": "^16.8.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-m8NKaYzWxifPGvrf9WGo/6WtOG6MNBIs2uNdcdIuQswtlkaV19AiFegwTeyblwoH2XxMcRviFJBvr4OkoTt3nA==",
    "shasum": "f411414cbc043a90254cddcef0793b2aaf14b086",
    "tarball": "https://registry.npmjs.org/react-ssr-prepass/-/react-ssr-prepass-1.0.2.tgz",
    "fileCount": 9,
    "unpackedSize": 96371,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcj7KzCRA9TVsSAnZWagAA6REQAKS+emxLpJawmQ4Re12e\nYw2WKGBioYiB/RmMJvWB7orwlwXhaUTHFk77RA/9ih2teuu2uV54fFbHMdkz\njbPm8G4mQH6a+mXd/nst/J5giZGnzlZUYolmoeELDfTHcKmrVJUAVGXyair+\nuHBSKmCzPRRdUQl/MFBmWgSBOG3LHR6KhCTyKY77WLCavM8h6f/fl5AIfOf4\n+SMq1QeUbovNATXXFRSizz2ekvbn6rVz+u6VN0cKcuAAam/cO1f8G6wDYtKi\ncMzYlGA+NmJFwlRLXQNk3fF57fail8d43czesqSUufsvlZLQQ4GtpiCayhe1\n6wk4yHPcwt0X5+ZoeQ8SvBQsrdYb7nZaAdsnYKW86jmUvb7WXv4w64DcttvA\nBZ0NXf6y3UzHoXQ9MHG/wsNc7qTMDnCnY3KStF4AZOcyGhIYBfB4h2ncuRNm\ntXenBv0Y8x2q77YIAlD1zpN6e2nEWbi67fIOKRUOFNmu4sImnShrTB2nnKY2\n3ckjXhXYvP3s7QGJ7LuvDr3vFD1St0amECQoN10AcnEnyqU4PF9PmaXeWhVh\n3bUxyKGNjvEdNDf2N+wPpIa6ICSf85BvvcrLrLknf1GyOvgg3LLa4QJ3Sioq\nFDgI8rPfvEKksMTvBZaIriGjja5J2vomhpKxa9d8YPMXq4AxyzswuR2O+8zE\nFT9/\r\n=rTT6\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js",
    "index.js.flow",
    "dist"
  ],
  "gitHead": "8245b8bd5c13f05e2f4ed0a98a1939f87b8c1918",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "license": "MIT",
  "lint-staged": {
    "**/*.js": [
      "flow focus-check",
      "prettier --write",
      "git add"
    ],
    "**/*.{json,md}": [
      "prettier --write",
      "git add"
    ]
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "philpl",
      "email": "phil@kitten.sh"
    }
  ],
  "name": "react-ssr-prepass",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^16.6.0",
    "react-is": "^16.6.0"
  },
  "prettier": {
    "semi": false,
    "singleQuote": true,
    "trailingComma": "none"
  },
  "readme": "# react-ssr-prepass\n\n<p>\n  <a href=\"https://travis-ci.org/kitten/react-ssr-prepass\">\n    <img alt=\"Build Status\" src=\"https://travis-ci.org/kitten/react-ssr-prepass.svg?branch=master\" />\n  </a>\n  <a href=\"https://coveralls.io/github/kitten/react-ssr-prepass?branch=master\">\n    <img alt=\"Test Coverage\" src=\"https://coveralls.io/repos/github/kitten/react-ssr-prepass/badge.svg?branch=master\" />\n  </a>\n  <a href=\"https://npmjs.com/package/react-ssr-prepass\">\n    <img alt=\"NPM Version\" src=\"https://img.shields.io/npm/v/react-ssr-prepass.svg\" />\n  </a>\n</p>\n\n<p>\n  <code>react-dom/server</code> does not have support for suspense yet.<br />\n  <code>react-ssr-prepass</code> offers suspense on the server-side today, until it does. ✨\n</p>\n\n`react-ssr-prepass` is a **partial server-side React renderer** that does a prepass\non a React element tree and suspends when it finds thrown promises. It also\naccepts a visitor function that can be used to suspend on anything.\n\nYou can use it to fetch data before your SSR code calls `renderToString` or\n`renderToNodeStream`.\n\n> ⚠️ **Note:** Suspense is unstable and experimental. This library purely\n> exists since `react-dom/server` does not support data fetching or suspense\n> yet. This two-pass approach should just be used until server-side suspense\n> support lands in React.\n\n## The Why & How\n\nIt's quite common to have some data that needs to be fetched before\nserver-side rendering and often it's inconvenient to specifically call\nout to random fetch calls to get some data. Instead **Suspense**\noffers a practical way to automatically fetch some required data,\nbut is currently only supported in client-side React.\n\n`react-ssr-prepass` offers a solution by being a \"prepass\" function\nthat walks a React element tree and executing suspense. It finds all\nthrown promises (a custom visitor can also be provided) and waits for\nthose promises to resolve before continuing to walk that particular\nsuspended subtree. Hence, it attempts to offer a practical way to\nuse suspense and complex data fetching logic today.\n\nA two-pass React render is already quite common for in other libraries\nthat do implement data fetching. This has however become quite impractical.\nWhile it was trivial to previously implement a primitive React renderer,\nthese days a lot more moving parts are involved to make such a renderer\ncorrect and stable. This is why some implementations now simply rely\non calling `renderToStaticMarkup` repeatedly.\n\n`react-ssr-prepass` on the other hand is a custom implementation\nof a React renderer. It attempts to stay true and correct to the\nReact implementation by:\n\n- Mirroring some of the implementation of `ReactPartialRenderer`\n- Leaning on React elements' symbols from `react-is`\n- Providing only the simplest support for suspense\n\n## Quick Start Guide\n\nFirst install `react-ssr-prepass` alongside `react` and `react-dom`:\n\n```sh\nyarn add react-ssr-prepass\n# or\nnpm install --save react-ssr-prepass\n```\n\nIn your SSR code you may now add it in front of your usual `renderToString`\nor `renderToNodeStream` code:\n\n```js\nimport { createElement } from 'react'\nimport { renderToString } from 'react-dom/server'\n\nimport ssrPrepass from 'react-ssr-prepass'\n\nconst renderApp = async App => {\n  const element = createElement(App)\n  await ssrPrepass(element)\n\n  return renderToString(element)\n}\n```\n\nAdditionally you can also pass a \"visitor function\" as your second argument.\nThis function is called for every React class or function element that is\nencountered.\n\n```js\nssrPrepass(<App />, (element, instance) => {\n  if (element.type === SomeData) {\n    return fetchData()\n  } else if (instance && instance.fetchData) {\n    return instance.fetchData()\n  }\n})\n```\n\nThe first argument of the visitor is the React element. The second is\nthe instance of a class component or undefined. When you return\na promise from this function `react-ssr-prepass` will suspend before\nrendering this element.\n\nYou should be aware that `react-ssr-prepass` does not handle any\ndata rehydration. In most cases it's fine to collect data from your cache\nor store after running `ssrPrepass`, turn it into JSON, and send it\ndown in your HTML result.\n\n## Examples & Recipes\n\n### Usage with `react-apollo`\n\nInstead of using `react-apollo`'s own `getDataFromTree` function, `react-ssr-prepass`\ncan be used instead. For this to work, we will have to write a visitor function\nthat knows how to suspend on `react-apollo`'s `Query` component.\n\nLuckily this is quite simple, since all we need to do is call the `fetchData`\nmethod on the `Query` component's instance.\n\n```js\nssrPrepass(<App />, (_element, instance) => {\n  if (instance !== undefined && typeof instance.fetchData === 'function') {\n    return instance.fetchData()\n  }\n})\n```\n\nSince we're now calling `fetchData` when it exists, which returns a `Promise`\nalready, `ssrPrepass` will suspend on `<Query>` components.\n\n[More information can be found in Apollo's own docs](https://www.apollographql.com/docs/react/features/server-side-rendering.html#getDataFromTree)\n\n## Prior Art\n\nThis library is (luckily) not a reimplementation from scratch of\nReact's server-side rendering. Instead it's mostly based on\nReact's own server-side rendering logic that resides in its\n[`ReactPartialRenderer`](https://github.com/facebook/react/blob/13645d2/packages/react-dom/src/server/ReactPartialRenderer.js).\n\nThe approach of doing an initial \"data fetching pass\" is inspired by:\n\n- [`react-apollo`'s `getDataFromTree`](https://github.com/apollographql/react-apollo/blob/master/src/getDataFromTree.ts)\n- [`react-tree-walker`](https://github.com/ctrlplusb/react-tree-walker)\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "run-p build:prod build:dev",
    "build:dev": "microbundle --target node -f cjs --no-compress --globals '__DEV__=true' -o dist/react-ssr-prepass.development.js",
    "build:prod": "microbundle --target node -f cjs --compress --globals '__DEV__=false' -o dist/react-ssr-prepass.production.min.js",
    "flow": "flow",
    "prepublishOnly": "run-s build",
    "test": "jest"
  },
  "source": "src/index.js",
  "version": "1.0.2"
}
